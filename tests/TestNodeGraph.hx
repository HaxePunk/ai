import com.haxepunk.ai.path.NodeGraph;
import com.haxepunk.masks.Grid;

class TestNodeGraph extends haxe.unit.TestCase
{

	private static var map = [
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
		1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,
		1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,
		1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,
		1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,
		1,1,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,
		1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,
		1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,
		1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,
		1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,1,0,0,1,
		1,0,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,
		1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	];

	public function testSearch()
	{
		var graph = new NodeGraph();

		var ts = 32, w = 20, h = 15;
		var grid = new Grid(w * ts, h * ts, ts, ts);
		for (y in 0...h)
		{
			for (x in 0...w)
			{
				grid.setTile(x, y, map[y * w + x] == 1);
			}
		}
		graph.fromGrid(grid);

		var nodes = graph.search(2, 1, 3, 13);
		assertTrue(nodes != null);
	}
}